#!/bin/bash
# by Osaroprime/Dr. Osaro Harriott (PhD)
# GENERAL CONSULTING ABC 123 BY OSAROPRIME
# NATION BUILDER PRO ‚Ñ¢
# MAGNETRON TECHNOLOGY ‚Ñ¢ RESEARCH INSTALLATION SCRIPT.

# Nation Builder Pro ‚Ñ¢
# color
# Reset

# NATION BUILDER PRO ‚Ñ¢ VERSION NUMBER
version=1.1

# NATION BUILDER PRO: GEO-LOCATION ‚Ñ¢ VERSION NUMBER
sversion=1.0



NC='\033[0m'
RED='\033[1;38;5;196m'
GREEN='\033[1;38;5;040m'
ORANGE='\033[1;38;5;202m'
BLUE='\033[1;38;5;012m'
BLUE2='\033[1;38;5;032m'
PINK='\033[1;38;5;013m'
GRAY='\033[1;38;5;004m'
NEW='\033[1;38;5;154m'
YELLOW='\033[1;38;5;214m'
CG='\033[1;38;5;087m'
CP='\033[1;38;5;221m'
CPO='\033[1;38;5;205m'
CN='\033[1;38;5;247m'
CNC='\033[1;38;5;051m'

# GEO-LOCATION BANNER
function banner(){
    echo -e "${RED}################################################################################################"
    echo -e "${BLUE2}  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà    ‚ñà‚ñà "
    echo -e "${BLUE2} ‚ñà‚ñà       ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà     ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà "
    echo -e "${BLUE2} ‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà     ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà "
    echo -e "${BLUE} ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà     ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà "
    echo -e "${BLUE}  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà "
    echo -e "${CP}                                               						       "
    echo -e "${GREEN}         		       	Nation Builder Pro ‚Ñ¢        				       "
    echo -e "${RED}         		   IP GEOLOCATION (APPROXIMATE)        				       "
    echo -e "${RED}                          Coded By: Dr Osaro Harriott (PhD)                        	       "
    echo -e "${CNC}                         https://github.com/sponsors/GCABC123                 		       "
    echo -e "${GREEN}                           https://linktr.ee/ABC123USA               			       "
    echo -e "${GREEN}                                    version $sversion               			               "
    echo -e "${GREEN}                     MAGNETRON TECHNOLOGY ‚Ñ¢ RESEARCH: LUCI-4 ‚Ñ¢               		       "               
    echo -e "${RED}################################################################################################"
}


# FUNCTION FOR IP ADDRESS INFO
function ip_info(){
    while true; do
        banner
        echo -e "${CP}\n[*] Enter 1 to enter an IP address"
        echo -e "${CP}\n[*] Enter 2 to return to the Main Menu"
        echo -e -n "${CP}\n[*] Choice: "
        read choice

        case $choice in
            1)
                #echo -e -n "${CP}\n[*] Enter Target IP: "
                #read ip
                # Proceed with the IP info retrieval process
                fetch_ip_info "$ip"
                ;;
            2)
                echo -e "${GREEN}\n[*] Returning to the Main Menu..."
                return
                ;;
            *)
                echo -e "${RED}\n[!] Invalid choice, please try again."
                ;;
        esac
    done
}





# FUNCTION FOR IP ADDRESS INFO

function fetch_ip_info(){
    #banner
    echo -e -n "${CP}\n[*] Enter Target IP: "
    read ip

    # Display the available language codes
    echo -e -n "${CP}\n[*] LANGUAGE CODES"
    echo -e -n "${CP}\n[*] en    English (default)"
    echo -e -n "${CP}\n[*] de    Deutsch (German)"
    echo -e -n "${CP}\n[*] es    Espa√±ol (Spanish)"
    echo -e -n "${CP}\n[*] pt-BR Portugu√™s - Brasil (Portuguese)"
    echo -e -n "${CP}\n[*] fr    Fran√ßais (French)"
    echo -e -n "${CP}\n[*] ja    Êó•Êú¨Ë™û (Japanese)"
    echo -e -n "${CP}\n[*] zh-CN ‰∏≠ÂõΩ (Chinese)"
    echo -e -n "${CP}\n[*] ru    –†—É—Å—Å–∫–∏–π (Russian)"

    echo -e -n "${CP}\n[*] ENTER LANGUAGE CODE: "
    read language

    # Convert input to lowercase and validate
    language=$(echo "$language" | tr '[:upper:]' '[:lower:]')

    # List of valid languages
    valid_languages=("en" "de" "es" "pt-br" "fr" "ja" "zh-cn" "ru")

    # Check if input is in the valid languages
    if [[ ! " ${valid_languages[@]} " =~ " ${language} " ]]; then
        echo -e "${RED}\n[!] Invalid language code. Defaulting to English (en).\n"
        language="en"
    fi

    dest="http://ip-api.com/json/"
    echo -e -n "${RED}\n[ üåê ] [VICTIM IP]: $ip \n"

    # Fetch and store results in a variable
    results=$(curl -s "$dest$ip?lang=$language&fields=66846719")

    # Display parsed results using jq for each field
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [STATUS]: $(echo "$results" | jq -r '.status') ‚úî \n"
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [CONTINENT üåé]: $(echo "$results" | jq -r '.continent') ‚úî \n"
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [CONTINENT CODE üåé]: $(echo "$results" | jq -r '.continentCode') ‚úî \n"
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [COUNTRY üåé]: $(echo "$results" | jq -r '.country') ‚úî \n"
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [REGION-NAME üåé]: $(echo "$results" | jq -r '.regionName') ‚úî \n"
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [CITY üåé]: $(echo "$results" | jq -r '.city') ‚úî \n"
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [DISTRICT]: $(echo "$results" | jq -r '.district') ‚úî \n"
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [ZIPCODE]: $(echo "$results" | jq -r '.zip') ‚úî \n"
    echo -e -n "${RED}\n[ üåê ]    ‚ûü [LATITUDE]: $(echo "$results" | jq -r '.lat') ‚úî \n"
    echo -e -n "${RED}\n[ üåê ]    ‚ûü [LONGITUDE]: $(echo "$results" | jq -r '.lon') ‚úî \n"
    echo -e -n "${ORANGE}\n[ üåê ] ‚ûü [ISP]: $(echo "$results" | jq -r '.isp') ‚úî \n"
    echo -e -n "${ORANGE}\n[ üåê ] ‚ûü [ORGANIZATION]: $(echo "$results" | jq -r '.org') ‚úî \n"
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [AS]: $(echo "$results" | jq -r '.as') ‚úî \n"
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [ASNAME]: $(echo "$results" | jq -r '.asname') ‚úî \n"
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [TIMEZONE]: $(echo "$results" | jq -r '.timezone') ‚úî \n"
    echo -e -n "${BLUE}\n[ üåê ]   ‚ûü [OFFSET]: $(echo "$results" | jq -r '.offset') ‚úî \n"
    echo -e -n "${YELLOW}\n[ üåê ] ‚ûü [CURRENCY]: $(echo "$results" | jq -r '.currency') ‚úî \n"
    echo -e -n "${GREEN}\n[ üåê ]  ‚ûü [REVERSE DNS]: $(echo "$results" | jq -r '.reverse') ‚úî \n"
    echo -e -n "${GREEN}\n[ üåê ]  ‚ûü [MOBILE üì≤]: $(echo "$results" | jq -r '.mobile') ‚úî \n"
    echo -e -n "${GREEN}\n[ üåê ]  ‚ûü [PROXY, VPN, TOR exit address]: $(echo "$results" | jq -r '.proxy') ‚úî \n"
    echo -e -n "${GREEN}\n[ üåê ]  ‚ûü [HOSTING, COLOCATED OR DATA CENTER]: $(echo "$results" | jq -r '.hosting') ‚úî \n"

    sleep 1
    echo -e -n "${RED}\n<--------Thanks For Using IP-Location Script--------->\n"
}













# MAIN MENU
function main_menu(){
    while true; do
        clear
        echo -e "${GREEN}========== MAIN MENU =========="
        echo -e "${GREEN}[1] Run IP Info"
        echo -e "${GREEN}[2] Exit"
        echo -e -n "${CP}[*] Select an option: "
        read option
        
        case $option in
            1)
                ip_info
                ;;
            2)
                echo -e "${GREEN}[*] Exiting. Goodbye!"
                exit 0
                ;;
            *)
                echo -e "${RED}[!] Invalid choice, please try again."
                ;;
        esac
    done
}

# Start the script
main_menu

